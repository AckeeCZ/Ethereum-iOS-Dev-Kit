// Generated using ContractGen

import ReactiveSwift
import EtherKit
import BigInt
import ContractCodegenFramework

extension EtherQuery {
    func {{ lowercasedContractName }}(at: Address) -> {{ contractName }}Box {
        return {{ contractName }}Box(etherQuery: self, at: at)
    }
}

struct {{ contractName }}MethodInvocation {
    private let {{ lowercasedContractName }}Box: {{ contractName }}Box
    private let a: BigInt

    init({{ lowercasedContractName }}Box: {{ contractName }}Box, a: BigInt) {
        self.{{ lowercasedContractName }}Box = {{ lowercasedContractName }}Box
        self.a = a
    }

    private func sendQuery(using: EtherKeyManager, from: Address, amount: UInt256) -> SignalProducer<Hash, EtherKitError> {
        return SignalProducer<Hash, EtherKitError> { observer, disposable in
            guard let paramsData = "foo(a: \(self.a))".data(using: .utf8) else {
                observer.send(error: EtherKitError.web3Failure(reason: .parsingFailure))
                return
            }
            self.{{ lowercasedContractName }}Box.etherQuery.send(using: using, from: from, to: self.{{ lowercasedContractName }}Box.at, value: amount, data: GeneralData(data: paramsData), completion: { result in
                switch result {
                case .success(let hash):
                    observer.send(value: hash)
                case .failure(let error):
                    observer.send(error: error)
                    observer.sendCompleted()
                }
            })
        }
    }

    func send(using: EtherKeyManager, from: Address, amount: UInt256) -> SignalProducer<Hash, EtherKitError> {
        return self.send(using: using, from: from, amount: amount)
    }
}

struct {{ contractName }}Box {
    fileprivate let etherQuery: EtherQuery
    fileprivate let at: Address

    init(etherQuery: EtherQuery, at: Address) {
        self.etherQuery = etherQuery
        self.at = at
    }

    {% for function in functions %}
    func {{ function.name }}({{ function.params }}) -> {{ contractName }}MethodInvocation {
      return {{ contractName }}MethodInvocation({{ lowercasedContractName }}Box: self, {{ function.params }})

    func foo(a: BigInt) -> HelloContractMethodInvocation {
        return HelloContractMethodInvocation(helloContractBox: self, a: a)
    }
}
